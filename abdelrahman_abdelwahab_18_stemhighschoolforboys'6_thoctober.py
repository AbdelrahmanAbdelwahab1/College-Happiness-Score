# -*- coding: utf-8 -*-
"""Abdelrahman_Abdelwahab_18_STEMhighSchoolforboys'6-thOctober.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1627QEa22PPL0BT-utujPzBfU8j2J5OrL

# please, upload the files(X_train, y_train, X_test) before running the code

# reveal the data using pandas
"""

import pandas as pd
import seaborn as sns

x = pd.read_csv("X_train.csv")

y = pd.read_csv('y_train.csv')
y = y.drop(y.columns[[0]], axis=1) # drop id column

x

"""## read test data"""

test= pd.read_csv("X_test.csv")

"""## start analysing and cleaning for data"""

# a basic idea was taken using the following commands
x.head()
x.describe()
x.info()
# to determine how many missing values are there and in which column
x.isnull().sum()

# if a row has more than 2 missing value, remove it for training only
row_number=[]
for i in range (182):
    missing_data_count = x.iloc[i].isnull().sum()
    if missing_data_count >2:
        row_number.append(i)

x = x.drop(list(row_number))
y=y.drop(list(row_number))

# save after removing and re-reading it
x.to_csv('data.csv')

x = pd.read_csv("data.csv")

print(x)

x

# drop the application deadline and convert it to days/months/years column as numbers
# the function to convert str months to numerical
def month_to_number(month):
    months = {"Jan": 1, "Feb": 2, "Mar": 3, "Apr": 4,
          "May": 5, "Jun": 6, "Jul": 7, "Aug": 8,
          "Sep": 9, "Oct": 10, "Nov": 11, "Dec": 12}
    return months.get(month)

deadline_column= x["Application.Deadline"]
# make empty lists to assign the values in it after splitting
days=[]
months=[]
years=[]

for i in range (len(deadline_column)):

    split= deadline_column[int(i)].split('-') # split according to -
    # append values in the empty lists
    days.append(int(split[0]))
    years.append(int(split[2]))
#apply the function to change the stored str in the split variable to numerical
    month_number=month_to_number(str(split[1]))
    months.append(month_number)

x = x.drop("Application.Deadline", axis=1) # drop the column
# add new column with the values assigned in the lists days, months, years
x = x.assign(days=days)
x = x.assign(months=months)
x = x.assign(years=years)

# check the all things done
print(len(days))
print(len(months))
print(len(years))
print(len(x))
x

# change categorical values to numerical in test and train while ensuring consistency
from sklearn.preprocessing import LabelEncoder

def categories_to_numerical(x, test, cat_col):
  label_encoder = LabelEncoder() # set up label encoder
#Fit label encoder on the categorical column in x and transform it to numeric
  x[cat_col] = label_encoder.fit_transform(x[cat_col])
#Transform the categorical column in test to numeric using the same algorithm performed on x
  test[cat_col] = label_encoder.transform(test[cat_col])
  mapping = dict(zip(label_encoder.classes_, label_encoder.transform(label_encoder.classes_)))
  return mapping

ownership_mapping = categories_to_numerical(x, test, 'Ownership')
citytype_mapping = categories_to_numerical(x, test, 'Citytype')

# use seaborn to visualize data and determine the outliers
names = x.columns.values.tolist()
for i in range(len(names)):
    sns.catplot(data=x, y= names[i])

# clean the training data
# there were some string values in column that need numerical value so replace thoose values with 0
columns_names = x.columns.values.tolist()
for i in range(len(columns_names)):
  for v in range(len(range(179))):
      try:
          x[str(columns_names[i])]= x[str(columns_names[i])].replace({x.iloc[v,i]:float(x.iloc[v,i])})
      except:
          x[str(columns_names[i])]= x[str(columns_names[i])].replace({x.iloc[v,i]:0})


# determine the outliers from seaborn visualization and replace them with the mean

AvgCost_values=x["AvgCost"]
for i in range(len(AvgCost_values)):
    if AvgCost_values[i] < 17000 or AvgCost_values[i] > 60000:
        x["AvgCost"]= x["AvgCost"].replace({AvgCost_values[i]:x["AvgCost"].mean()})


Earn_values=x["Earn"]
for i in range(len(Earn_values)):
    if Earn_values[i] < 29000 or Earn_values[i] > 90000:
        x["Earn"]= x["Earn"].replace({Earn_values[i]:x["Earn"].mean()})


CrimeRate_values=x["CrimeRate"]
for i in range(len(CrimeRate_values)):
    if CrimeRate_values[i] > 590:
        x["CrimeRate"]= x["CrimeRate"].replace({CrimeRate_values[i]:x["CrimeRate"].mean()})


Enrollment_values=x["Enrollment"]
for i in range(len(Enrollment_values)):
    if Enrollment_values[i] > 17000:
        x["Enrollment"]= x["Enrollment"].replace({Enrollment_values[i]:float(x["Enrollment"].mean())})


FBITotalCrime_values=x["FBI.TotalCrime"]
for i in range(len(FBITotalCrime_values)):
    if int(FBITotalCrime_values[i]) > 23000:
        x["FBI.TotalCrime"]= x["FBI.TotalCrime"].replace({FBITotalCrime_values[i]:x["FBI.TotalCrime"].mean()})


ADMrate_values=x["ADMrate"]
for i in range(len(ADMrate_values)):
    if ADMrate_values[i] > 20:
        x["ADMrate"] = x["ADMrate"].replace({ADMrate_values[i]:float(x["ADMrate"].mean())})

ADMrate_values=x["ADMrate"]
for i in range(len(ADMrate_values)):
    if ADMrate_values[i] > 20:
        x["ADMrate"] = x["ADMrate"].replace({ADMrate_values[i]:float(x["ADMrate"].mean())})

SAT_values=x["SAT"]
for i in range(len(SAT_values)):
    if SAT_values[i] == 1:
        x["SAT"]= x["SAT"].replace({SAT_values[i]:x["SAT"].mode()})


ACT_values=x["ACT"]
for i in range(len(ACT_values)):
    if ACT_values[i] == 1:
        x["ACT"]= x["ACT"].replace({ACT_values[i]:x["ACT"].mode()})


Citytype_values=x["Citytype"]
for i in range(len(Citytype_values)):
    if Citytype_values[i] not in [1,2,3,4] :
        x["Citytype"]= x["Citytype"].replace({Citytype_values[i]:float(x["Citytype"].mode())})

Ownership_values=x["Ownership"]
for i in range(len(Ownership_values)):
    if Ownership_values[i] <0.9 :
        x["Ownership"]= x["Ownership"].replace({Ownership_values[i]:float(x["Ownership"].mode())})


Major_Bio_values=x["Major_Bio"]
for i in range(len(Major_Bio_values)):
    if Major_Bio_values[i] ==2 :
        x["Major_Bio"]= x["Major_Bio"].replace({Major_Bio_values[i]:float(x["Major_Bio"].mode())})


Major_Psychologyvalues=x["Major_Psychology"]
for i in range(len(Major_Psychologyvalues)):
    if Major_Psychologyvalues[i] ==2 :
        x["Major_Psychology"]= x["Major_Psychology"].replace({Major_Psychologyvalues[i]:float(x["Major_Psychology"].mode())})


Major_Historyvalues=x["Major_History"]
for i in range(len(Major_Historyvalues)):
    if Major_Historyvalues[i] ==2 :
        x["Major_History"]= x["Major_History"].replace({Major_Historyvalues[i]:float(x["Major_History"].mode())})


Major_agriculture_values=x["Major_agriculture"]
for i in range(len(Major_agriculture_values)):
    if Major_agriculture_values[i] ==2 :
        x["Major_agriculture"]= x["Major_agriculture"].replace({Major_agriculture_values[i]:float(x["Major_agriculture"].mode())})


Major_edu_values=x["Major_Edu"]
for i in range(len(Major_edu_values)):
    if Major_edu_values[i] ==2 :
        x["Major_Edu"]= x["Major_Edu"].replace({Major_edu_values[i]:float(x["Major_Edu"].mode())})


Major_Engineering_values=x["Major_Engineering"]
for i in range(len(Major_Engineering_values)):
    if Major_Engineering_values[i] ==2 :
        x["Major_Engineering"]= x["Major_Engineering"].replace({Major_Engineering_values[i]:float(x["Major_Engineering"].mode())})


FBI_CrimeRate_values=x["FBI.CrimeRate"]
for i in range(len(FBI_CrimeRate_values)):
    if FBI_CrimeRate_values[i] >20 :
        x["FBI.CrimeRate"]= x["FBI.CrimeRate"].replace({FBI_CrimeRate_values[i]:float(x["FBI.CrimeRate"].mean())})

# use seaborn to check that I have dealt with the outliers
names = x.columns.values.tolist()
for i in range(len(names)):
    sns.catplot(data=x, y= names[i])

"""# apply the same algorithm for the test data"""

# drop the application deadline and convert it to days/months/years column as numbers

def month_to_number(month):
    months = {"Jan": 1, "Feb": 2, "Mar": 3, "Apr": 4,
          "May": 5, "Jun": 6, "Jul": 7, "Aug": 8,
          "Sep": 9, "Oct": 10, "Nov": 11, "Dec": 12}
    return months.get(month)

deadline_column= test["Application.Deadline"]
days=[]
months=[]
years=[]

for i in range (len(deadline_column)):

    split= deadline_column[int(i)].split('-')
    days.append(int(split[0]))
    years.append(int(split[2]))
    month_number=month_to_number(str(split[1]))
    months.append(month_number)


test = test.drop("Application.Deadline", axis=1)
test = test.assign(days=days)
test = test.assign(months=months)
test = test.assign(years=years)

# check the all things done
print(len(days))
print(len(months))
print(len(years))
print(len(test))
print(test)

columns_names = test.columns.values.tolist()
for i in range(len(columns_names)):
  for v in range(len(range(90))):
      try:
          test[str(columns_names[i])]= test[str(columns_names[i])].replace({test.iloc[v,i]:float(test.iloc[v,i])})


      except:
          test[str(columns_names[i])]= test[str(columns_names[i])].replace({test.iloc[v,i]:0})

          print(v,i)

# determine the outliers from seaborn visualization and replace them with the mean

AvgCost_values=test["AvgCost"]
for i in range(len(AvgCost_values)):
    if AvgCost_values[i] < 17000 or AvgCost_values[i] > 60000:
        test["AvgCost"]= test["AvgCost"].replace({AvgCost_values[i]:test["AvgCost"].mean()})


Earn_values=test["Earn"]
for i in range(len(Earn_values)):
    if Earn_values[i] < 29000 or Earn_values[i] > 90000:
        test["Earn"]= test["Earn"].replace({Earn_values[i]:test["Earn"].mean()})


CrimeRate_values=test["CrimeRate"]
for i in range(len(CrimeRate_values)):
    if CrimeRate_values[i] > 590:
        test["CrimeRate"]= test["CrimeRate"].replace({CrimeRate_values[i]:test["CrimeRate"].mean()})


Enrollment_values=test["Enrollment"]
for i in range(len(Enrollment_values)):
    if Enrollment_values[i] > 17000:
        test["Enrollment"]= test["Enrollment"].replace({Enrollment_values[i]:float(test["Enrollment"].mean())})


FBITotalCrime_values=test["FBI.TotalCrime"]
for i in range(len(FBITotalCrime_values)):
    if int(FBITotalCrime_values[i]) > 23000:
        test["FBI.TotalCrime"]= test["FBI.TotalCrime"].replace({FBITotalCrime_values[i]:test["FBI.TotalCrime"].mean()})


ADMrate_values=test["ADMrate"]
for i in range(len(ADMrate_values)):
    if ADMrate_values[i] > 20:
        test["ADMrate"] = test["ADMrate"].replace({ADMrate_values[i]:float(test["ADMrate"].mean())})

ADMrate_values=test["ADMrate"]
for i in range(len(ADMrate_values)):
    if ADMrate_values[i] > 20:
        test["ADMrate"] = test["ADMrate"].replace({ADMrate_values[i]:float(test["ADMrate"].mean())})

SAT_values=test["SAT"]
for i in range(len(SAT_values)):
    if SAT_values[i] == 1:
        test["SAT"]= test["SAT"].replace({SAT_values[i]:test["SAT"].mode()})


ACT_values=test["ACT"]
for i in range(len(ACT_values)):
    if ACT_values[i] == 1:
        test["ACT"]= test["ACT"].replace({ACT_values[i]:test["ACT"].mode()})


Citytype_values=test["Citytype"]
for i in range(len(Citytype_values)):
    if Citytype_values[i] not in [1,2,3,4] :
        test["Citytype"]= test["Citytype"].replace({Citytype_values[i]:float(test["Citytype"].mode())})

Ownership_values=test["Ownership"]
for i in range(len(Ownership_values)):
    if Ownership_values[i] <0.9 :
        test["Ownership"]= test["Ownership"].replace({Ownership_values[i]:float(test["Ownership"].mode())})


Major_Bio_values=test["Major_Bio"]
for i in range(len(Major_Bio_values)):
    if Major_Bio_values[i] ==2 :
        test["Major_Bio"]= test["Major_Bio"].replace({Major_Bio_values[i]:float(test["Major_Bio"].mode())})


Major_Psychologyvalues=test["Major_Psychology"]
for i in range(len(Major_Psychologyvalues)):
    if Major_Psychologyvalues[i] ==2 :
        test["Major_Psychology"]= test["Major_Psychology"].replace({Major_Psychologyvalues[i]:float(test["Major_Psychology"].mode())})


Major_Historyvalues=test["Major_History"]
for i in range(len(Major_Historyvalues)):
    if Major_Historyvalues[i] ==2 :
        test["Major_History"]= test["Major_History"].replace({Major_Historyvalues[i]:float(test["Major_History"].mode())})


Major_agriculture_values=test["Major_agriculture"]
for i in range(len(Major_agriculture_values)):
    if Major_agriculture_values[i] ==2 :
        test["Major_agriculture"]= test["Major_agriculture"].replace({Major_agriculture_values[i]:float(test["Major_agriculture"].mode())})


Major_edu_values=test["Major_Edu"]
for i in range(len(Major_edu_values)):
    if Major_edu_values[i] ==2 :
        test["Major_Edu"]= test["Major_Edu"].replace({Major_edu_values[i]:float(test["Major_Edu"].mode())})


Major_Engineering_values=test["Major_Engineering"]
for i in range(len(Major_Engineering_values)):
    if Major_Engineering_values[i] ==2 :
        test["Major_Engineering"]= test["Major_Engineering"].replace({Major_Engineering_values[i]:float(test["Major_Engineering"].mode())})


FBI_CrimeRate_values=test["FBI.CrimeRate"]
for i in range(len(FBI_CrimeRate_values)):
    if FBI_CrimeRate_values[i] >20 :
        test["FBI.CrimeRate"]= test["FBI.CrimeRate"].replace({FBI_CrimeRate_values[i]:float(test["FBI.CrimeRate"].mean())})

# another examination for the data to ensure that it has high quality

names = x.columns.values.tolist()
for i in range(len(names)):
    sns.catplot(data=x, y= names[i])

"""drop unnecessary columns"""

x= x.drop("Unnamed: 0.1", axis=1)

x= x.drop("Unnamed: 0", axis=1)

"""# Features Normalizing"""

from sklearn.preprocessing import MinMaxScaler

# normalizing training data
scaler = MinMaxScaler()
x = scaler.fit_transform(x)
x = pd.DataFrame(x)
x.to_csv("new.csv")
x = pd.read_csv("new.csv")
x= x.drop("Unnamed: 0", axis=1)

# normalizing test data
ID = test["Unnamed: 0"]
test= test.drop("Unnamed: 0", axis=1)
test = scaler.fit_transform(test)
test = pd.DataFrame(test)

# Replace the NaN in the data with the mode for training
def replace_null_with_mode(column):
    mode_value = column.mode().iloc[0]
    return column.fillna(mode_value)

x = x.apply(replace_null_with_mode)

x.isnull().sum() # command to ensure that there is no missing data

# Replace the NaN in the data with the mode for test
test = test.apply(replace_null_with_mode)

test.isnull().sum() # command to ensure that there is no missing data

"""# The used model (gradient boosting model)"""

from sklearn.model_selection import train_test_split
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error
# split the data to test and train
X_train, X_test, y_train, y_test = train_test_split(x, y,
                                                    test_size=0.22, random_state=42,
                                                    shuffle= True)
# the model with its parameters
model = GradientBoostingRegressor(n_estimators=32,learning_rate=0.2,
                                  max_depth=5, random_state=52,
                                  min_samples_split=2)
model.fit(X_train, y_train) # training the model
predictions = model.predict(X_test) # make prediction

# model evaluation by using mean square error and r2 score
print("Mean Squared Error:",mean_squared_error(y_test,predictions))
print('R2 Score:',r2_score(y_test,predictions))

#Visualizing the actual and predicted values

import matplotlib.pyplot as plt

plt.scatter(y_test,predictions)
plt.plot(y_test, y_test, color='r')

plt.xlabel('Actual Values')
plt.ylabel('Predicted Values')
plt.title('Actual vs Predicted Values')
plt.show()

"""#use the model to predict the values of test data"""

predictions = model.predict(test)

"""# save predictions in CSV"""

import csv

data = zip(ID, predictions)


with open("Abdelrahman_Abdelwahab_18_STEMhighSchoolforboys'6-thOctober.csv", 'w', newline='') as csvfile:
    csv_writer = csv.writer(csvfile)

    csv_writer.writerow(["", 'predictions'])

    csv_writer.writerows(data)